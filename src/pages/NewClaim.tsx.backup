

import React, { useEffect, useState } from 'react';
import SEO from '@/components/SEO';
import { useAuth } from '@/context/AuthContext';
import { getEmployeeByIdOrEmail, getEmployeeGrade } from '@/lib/unifiedEmployeeService';
import { getEntitlementsForGrade } from '@/lib/entitlementRules';
import { getTrackingStatus } from '@/lib/gpsTracking';
import { parseFuelRule } from '@/lib/fuelRuleUtils';
import { createClaim, ClaimType } from '@/lib/claimsService';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';

const CLAIM_TYPES: { value: ClaimType; label: string }[] = [
  { value: 'travel', label: 'Travel Expenses' },
  { value: 'accommodation', label: 'Accommodation' },
  { value: 'food', label: 'Food & Meals' },
  { value: 'fuel', label: 'Fuel Expenses' },
  { value: 'communication', label: 'Communication' },
  { value: 'medical', label: 'Medical Expenses' },
  { value: 'other', label: 'Other Expenses' },
];

const NewClaim = () => {
  const { user } = useAuth();
  const { toast } = useToast();
  const [employee, setEmployee] = useState(null);
  const [grade, setGrade] = useState(null);
  const [claimType, setClaimType] = useState<ClaimType>('travel');
  const [amount, setAmount] = useState('');
  const [description, setDescription] = useState('');
  const [location, setLocation] = useState('');
  const [distance, setDistance] = useState('');
  const [notes, setNotes] = useState('');
  const [entitlements, setEntitlements] = useState(null);
  const [submitting, setSubmitting] = useState(false);

  useEffect(() => {
    if (user) {
      getEmployeeByIdOrEmail(user.email).then(emp => {
        setEmployee(emp);
        if (emp?.grade) {
          getEmployeeGrade(emp.grade).then(gr => {
            setGrade(gr);
            setPolicy(gr?.name || '');
            if (gr) {
              const ent = getEntitlementsForGrade(gr);
              setEntitlements(ent);
              // Get GPS distance if available
              const status = getTrackingStatus();
              if (status.currentDistance && status.currentDistance > 0) {
                const km = Math.round(status.currentDistance / 1000);
                setDistanceKm(km);
                // Calculate allowed fuel
                const kmPerLitre = parseFuelRule(ent.fuelRule || '');
                if (kmPerLitre) {
                  setFuelAllowed(Number((km / kmPerLitre).toFixed(2)));
                } else {
                  setFuelAllowed(null);
                }
              }
            }
          });
        }
      });
    }
  }, [user]);

  // Document upload mandatory for all claims except Kilometer-based fuel claims
  const isKMBasedFuelClaim = claimType === 'Taxi / Auto / Bus / Train / Fuel Bills' && distanceKm !== null && distanceKm > 0;
  const isReceiptRequired = !isKMBasedFuelClaim;

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');
    setSubmitting(true);
    try {
      if (!amount || isNaN(Number(amount))) {
        setError('Amount is required and must be a number.');
        setSubmitting(false);
        return;
      }
      if (isReceiptRequired && !receipt) {
        setError('Document upload is mandatory for this claim type.');
        setSubmitting(false);
        return;
      }
      if (isJointWorking && !remarks.trim()) {
        setError('Remarks are required for Joint Working Claims.');
        setSubmitting(false);
        return;
      }

      // Prepare claim data
      const claimData = {
        userId: user?.uid,
        employeeId: employee?.id || user?.uid,
        name: employee?.name || user?.name || '',
        grade: employee?.grade || '',
        policy: policy,
        type: claimType,
        amount: Number(amount),
        date: new Date(),
        description,
        remarks,
        receipt: '', // will be set after upload
        managerChain: [employee?.approvalChain?.L1 || '', employee?.approvalChain?.L2 || '', employee?.approvalChain?.L3 || ''],
      };

      // Create claim first to get claimId
      const { id: claimId, error: claimError } = await createClaim(claimData);
      if (claimError || !claimId) {
        setError('Failed to create claim: ' + claimError);
        setSubmitting(false);
        return;
      }

      // Upload receipt if present
      let receiptUrl = '';
      if (isReceiptRequired && receipt) {
        try {
          receiptUrl = await uploadClaimReceipt(claimId, receipt);
        } catch (uploadErr) {
          setError('Failed to upload receipt: ' + (uploadErr?.message || uploadErr));
          setSubmitting(false);
          return;
        }
        // Update claim with receipt URL
        await createClaim({ ...claimData, receipt: receiptUrl });
      }

      setSuccess('Claim submitted successfully!');
      setAmount('');
      setDescription('');
      setRemarks('');
      setReceipt(null);
      setIsJointWorking(false);
    } catch (err: any) {
      setError('Failed to submit claim: ' + (err?.message || err));
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <>
      <SEO title="New Claim" description="Submit a new claim." />
      <div className="p-4 sm:p-6">
        <h1 className="text-xl sm:text-2xl font-semibold mb-3 sm:mb-4">New Claim</h1>
        <form className="bg-white rounded shadow p-2 sm:p-4 max-w-md" onSubmit={handleSubmit}>
          <div className="mb-3 sm:mb-4">
            <label className="block mb-1 font-medium">Employee ID</label>
            <input className="w-full border rounded px-2 py-1 bg-gray-100" value={employee?.id || user?.uid || ''} readOnly />
          </div>
          <div className="mb-3 sm:mb-4">
            <label className="block mb-1 font-medium">Name</label>
            <input className="w-full border rounded px-2 py-1 bg-gray-100" value={employee?.name || user?.name || ''} readOnly />
          </div>
          <div className="mb-3 sm:mb-4">
            <label className="block mb-1 font-medium">Grade</label>
            <input className="w-full border rounded px-2 py-1 bg-gray-100" value={employee?.grade || ''} readOnly />
          </div>
          <div className="mb-3 sm:mb-4">
            <label className="block mb-1 font-medium">Policy</label>
            <input className="w-full border rounded px-2 py-1 bg-gray-100" value={policy} readOnly />
          </div>
          {entitlements && (
            <div className="mb-3 sm:mb-4">
              <label className="block mb-1 font-semibold text-blue-700">Entitlements & Fuel Calculation</label>
              <div className="w-full border rounded-lg px-3 py-2 bg-blue-50 shadow-sm">
                <div className="flex flex-col gap-1 text-sm">
                  <div><span className="font-medium text-gray-700">Vehicle:</span> <span className="text-gray-900">{entitlements.vehicleType}</span></div>
                  <div><span className="font-medium text-gray-700">Fuel Rule:</span> <span className="text-gray-900">{entitlements.fuelRule}</span></div>
                  {entitlements.specialEntitlement && <div className="text-orange-600 font-semibold">Special Entitlement</div>}
                </div>
                {distanceKm !== null && (
                  <div className="mt-3 p-2 rounded bg-white border border-blue-200">
                    <div className="text-xs text-gray-500 mb-1">Calculation</div>
                    <div className="flex flex-col gap-1">
                      <div><span className="font-medium">GPS Distance:</span> <span className="text-blue-800">{distanceKm} km</span></div>
                      {fuelAllowed !== null && (
                        <div className="mt-1"><span className="font-medium">Allowed Fuel Claim:</span> <span className="text-green-700 font-bold">{fuelAllowed} litres</span> <span className="text-xs text-gray-500">({distanceKm} km / {parseFuelRule(entitlements.fuelRule || '')} km/litre)</span></div>
                      )}
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}
          <div className="mb-3 sm:mb-4">
            <label className="block mb-1 font-medium">Claim Type</label>
            <select className="w-full border rounded px-2 py-1" value={claimType} onChange={e => setClaimType(e.target.value)}>
              {CLAIM_TYPES.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
            </select>
          </div>
          <div className="mb-3 sm:mb-4">
            <label className="block mb-1 font-medium">Amount</label>
            <input type="number" className="w-full border rounded px-2 py-1" placeholder="Enter amount" value={amount} onChange={e => setAmount(e.target.value)} />
          </div>
          <div className="mb-3 sm:mb-4">
            <label className="block mb-1 font-medium">Description</label>
            <textarea className="w-full border rounded px-2 py-1" placeholder="Describe your claim" value={description} onChange={e => setDescription(e.target.value)} />
          </div>
          <div className="mb-3 sm:mb-4">
            <label className="flex items-center gap-2">
              <input 
                type="checkbox" 
                checked={isJointWorking} 
                onChange={(e) => setIsJointWorking(e.target.checked)}
                className="rounded"
              />
              <span className="font-medium">Joint Working Claim</span>
            </label>
          </div>
          {isJointWorking && (
            <div className="mb-3 sm:mb-4">
              <label className="block mb-1 font-medium">Remarks (Joint Working)</label>
              <textarea className="w-full border rounded px-2 py-1" placeholder="Enter remarks" value={remarks} onChange={e => setRemarks(e.target.value)} />
            </div>
          )}
          {isReceiptRequired && (
            <div className="mb-3 sm:mb-4">
              <label className="block mb-1 font-medium">Document Upload <span className="text-red-600">*</span></label>
              <input type="file" className="w-full" accept="image/*,application/pdf" onChange={e => setReceipt(e.target.files[0])} />
              <div className="text-xs text-gray-500 mt-1">Required for all claims except KM-based travel.</div>
            </div>
          )}
          {error && <div className="text-red-600 text-sm mb-2">{error}</div>}
          <button type="submit" className="bg-blue-600 text-white px-4 py-2 rounded w-full disabled:opacity-50 mt-2" disabled={submitting}>{submitting ? 'Submitting...' : 'Submit Claim'}</button>
          {success && <div className="text-green-600 text-sm mt-2">{success}</div>}
        </form>
  <div className="mt-4 text-sm text-muted-foreground">(Connect this form to Firestore or your backend to save claims.)</div>
      </div>
    </>
  );
};

export default NewClaim;
